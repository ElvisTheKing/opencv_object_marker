#!/usr/bin/env python

import os
import cv2
import click
import logging
import copy
logging.basicConfig(level=logging.INFO)

@click.command()
@click.argument('in_dir', type=click.Path(exists=True))
@click.argument('out_file', default = './output.txt', type = click.File('w', lazy = False))
def main(in_dir,out_file):
    files = os.listdir(in_dir)
    window = CvWindow()
    
    for f in files: 
        f_path = os.path.join(in_dir,f)
        img = cv2.imread(f_path)
        
        if img == None: 
            logging.warning(" %s is not image, skipping", f)

        box = window.show_image(img)
        if box:
            line  = "%s 1 %d %d %d %d" % (
                f_path,
                box[0][0],box[0][1],
                box[1][0],box[1][1],
            )

            logging.info("saving: %s", line)
            out_file.write(line+'\n')
            out_file.flush()
        
        elif box == None:
            logging.info("user skipped %s",f)
        
        else:
            logging.info("user exited")
            break

    out_file.close()


class CvWindow(object):
    # states:
    # 0 none selected
    # 1 one corner of bounding box selected
    # 2 both corners selected
    # 3 selection finilized with rmb (only after 2!)

    def __init__(self):
        self.image = None
        self.clear_state()

        cv2.namedWindow('image')
        cv2.setMouseCallback('image',self.mouse_callback)

    def clear_state(self):
        self.state = 0
        self.start_point = [0,0]
        self.end_point = [0,0]

    def mouse_callback(self,ev,x,y,flags,param):
        if (ev == cv2.EVENT_LBUTTONDOWN):
            if self.state == 0:
                self.state = 1
                self.start_point[0]=x
                self.start_point[1]=y
            elif self.state == 1:
                self.state = 2
                self.end_point[0]=x
                self.end_point[1]=y
            else:
                self.state = 0
                cv2.imshow('image',self.image)

        if (ev == cv2.EVENT_RBUTTONDOWN and self.state == 2):
            self.state = 3

        if (ev == cv2.EVENT_MOUSEMOVE and self.state == 1):
            img = copy.deepcopy(self.image)
            cv2.rectangle(img,
                tuple(self.start_point),
                (x,y),
                (255,0,0)
            )

            cv2.imshow('image',img)

    def show_image(self,image):
        self.clear_state()
        self.image = image
        cv2.imshow('image',image)
        
        while True:
            key = cv2.waitKey(100) & 0xFF
            if key == 27: 
                #esc
                return False

            if key in (115,83): 
                #s to skip
                return None

            if (key == 32  and self.state == 2) or self.state == 3: 
                #space or #rmb from state 2
                return (self.start_point,self.end_point)


            

if __name__ == '__main__':
    main()
